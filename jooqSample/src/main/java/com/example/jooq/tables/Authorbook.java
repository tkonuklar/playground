/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Indexes;
import com.example.jooq.Keys;
import com.example.jooq.Public;
import com.example.jooq.tables.records.AuthorbookRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Authorbook extends TableImpl<AuthorbookRecord> {

    private static final long serialVersionUID = 1436370247;

    /**
     * The reference instance of <code>public.authorbook</code>
     */
    public static final Authorbook AUTHORBOOK = new Authorbook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthorbookRecord> getRecordType() {
        return AuthorbookRecord.class;
    }

    /**
     * The column <code>public.authorbook.author_id</code>.
     */
    public final TableField<AuthorbookRecord, Integer> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.authorbook.book_id</code>.
     */
    public final TableField<AuthorbookRecord, Integer> BOOK_ID = createField("book_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.authorbook</code> table reference
     */
    public Authorbook() {
        this(DSL.name("authorbook"), null);
    }

    /**
     * Create an aliased <code>public.authorbook</code> table reference
     */
    public Authorbook(String alias) {
        this(DSL.name(alias), AUTHORBOOK);
    }

    /**
     * Create an aliased <code>public.authorbook</code> table reference
     */
    public Authorbook(Name alias) {
        this(alias, AUTHORBOOK);
    }

    private Authorbook(Name alias, Table<AuthorbookRecord> aliased) {
        this(alias, aliased, null);
    }

    private Authorbook(Name alias, Table<AuthorbookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Authorbook(Table<O> child, ForeignKey<O, AuthorbookRecord> key) {
        super(child, key, AUTHORBOOK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUTHORBOOK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthorbookRecord> getPrimaryKey() {
        return Keys.AUTHORBOOK_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthorbookRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthorbookRecord>>asList(Keys.AUTHORBOOK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AuthorbookRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AuthorbookRecord, ?>>asList(Keys.AUTHORBOOK__FK_AB_AUTHOR, Keys.AUTHORBOOK__FK_AB_BOOKS);
    }

    public Authors authors() {
        return new Authors(this, Keys.AUTHORBOOK__FK_AB_AUTHOR);
    }

    public Books books() {
        return new Books(this, Keys.AUTHORBOOK__FK_AB_BOOKS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authorbook as(String alias) {
        return new Authorbook(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authorbook as(Name alias) {
        return new Authorbook(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Authorbook rename(String name) {
        return new Authorbook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Authorbook rename(Name name) {
        return new Authorbook(name, null);
    }
}
